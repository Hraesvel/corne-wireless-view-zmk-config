#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// LAYERS

#define COL 0
#define NAV 1
#define NUM 2

// MACROS

#define U_UNDO  LG(Z)
#define U_CUT   LG(X)
#define U_COPY  LG(C)
#define U_PSTE  LG(V)
#define U_REDO  LS(LG(Z))
#define U_CLIP  LC(LG(C))
#define U_SHOT  LS(LG(N4))

// CONFIGURATION

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

// KEYMAP

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        qs: qs {
            compatible = "zmk,behavior-sticky-key";
            label = "QS";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <500>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Left-hand combos

        combo_AT_SIGN {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&kp AT_SIGN>;
        };

        combo_LEFT_BRACE {
            timeout-ms = <40>;
            key-positions = <2 3>;
            bindings = <&kp LEFT_BRACE>;
        };

        combo_EXCLAMATION {
            timeout-ms = <40>;
            key-positions = <1 11>;
            bindings = <&kp EXCLAMATION>;
        };

        combo_HASH {
            timeout-ms = <40>;
            key-positions = <2 12>;
            bindings = <&kp HASH>;
        };

        combo_DOLLAR {
            timeout-ms = <40>;
            key-positions = <3 13>;
            bindings = <&kp DOLLAR>;
        };

        combo_GRAVE {
            timeout-ms = <40>;
            key-positions = <10 11>;
            bindings = <&kp GRAVE>;
        };

        combo_COLON {
            timeout-ms = <40>;
            key-positions = <11 12>;
            bindings = <&kp COLON>;
        };

        combo_LEFT_PARENTHESIS {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&kp LEFT_PARENTHESIS>;
        };

        combo_PERCENT {
            timeout-ms = <40>;
            key-positions = <11 21>;
            bindings = <&kp PERCENT>;
        };

        combo_CARET {
            timeout-ms = <40>;
            key-positions = <12 22>;
            bindings = <&kp CARET>;
        };

        combo_AMPERSAND {
            timeout-ms = <40>;
            key-positions = <13 23>;
            bindings = <&kp AMPERSAND>;
        };

        combo_TILDE {
            timeout-ms = <40>;
            key-positions = <20 21>;
            bindings = <&kp TILDE>;
        };

        combo_SEMICOLON {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp SEMICOLON>;
        };

        combo_LEFT_BRACKET {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LEFT_BRACKET>;
        };

        // Right-hand combos

        combo_RIGHT_BRACE {
            timeout-ms = <40>;
            key-positions = <6 7>;
            bindings = <&kp RIGHT_BRACE>;
        };

        combo_DOUBLE_QUOTES {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp DOUBLE_QUOTES>;
        };

        combo_EQUAL {
            timeout-ms = <40>;
            key-positions = <6 16>;
            bindings = <&kp EQUAL>;
        };

        combo_PIPE {
            timeout-ms = <40>;
            key-positions = <7 17>;
            bindings = <&kp PIPE>;
        };

        combo_BACKSLASH {
            timeout-ms = <40>;
            key-positions = <8 18>;
            bindings = <&kp BACKSLASH>;
        };

        combo_RIGHT_PARENTHESIS {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp RIGHT_PARENTHESIS>;
        };

        combo_MINUS {
            timeout-ms = <40>;
            key-positions = <17 18>;
            bindings = <&kp MINUS>;
        };

        combo_KP_PLUS {
            timeout-ms = <40>;
            key-positions = <18 19>;
            bindings = <&kp KP_PLUS>;
        };

        combo_ASTERISK {
            timeout-ms = <40>;
            key-positions = <16 26>;
            bindings = <&kp ASTERISK>;
        };

        combo_LESS_THAN {
            timeout-ms = <40>;
            key-positions = <17 27>;
            bindings = <&kp LESS_THAN>;
        };

        combo_GREATER_THAN {
            timeout-ms = <40>;
            key-positions = <18 28>;
            bindings = <&kp GREATER_THAN>;
        };

        combo_RIGHT_BRACKET {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp RIGHT_BRACKET>;
        };

        combo_UNDERSCORE {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp UNDERSCORE>;
        };

        combo_QUESTION {
            timeout-ms = <40>;
            key-positions = <28 29>;
            bindings = <&kp QUESTION>;
        };

        layer4 {
            bindings = <&tog 3>;
            key-positions = <32 33>;
            layers = <0 3>;
        };

        zbrush {
            bindings = <&tog 4>;
            key-positions = <30 35>;
        };
    };

    macros {
        r_arrow: k {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE>;
            label = "R_ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        col_layer {
            label = "COLMAK";
            bindings = <
  &kp Q        &kp W        &kp F       &kp P        &kp B      &kp J       &kp L            &kp U            &kp Y        &kp SQT
  &hm LSHFT A  &hm LCTRL R  &hm LALT S  &hm LGUI T   &kp G      &kp M       &hm LGUI N       &hm LALT E       &hm LCTRL I  &hm LSHFT O
  &kp Z        &kp X        &kp C       &kp D        &kp V      &kp K       &kp H            &kp COMMA        &kp DOT      &kp FSLH
                            &kp ESC     &lt 1 SPACE  &kp TAB    &kp RETURN  &lt 2 BACKSPACE  &hm LG(P) LG(C)
            >;
        };

        nav_layer {
            label = "ARROWS";
            bindings = <
  &kp LG(N1)                         &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)         &caps_word  &kp PG_UP   &kp UP_ARROW  &kp PG_DN     &kp END
  &qs LEFT_SHIFT                     &kp LCTRL   &kp LALT    &kp LGUI    &hm LG(V) LG(X)    &kp U_SHOT  &kp LEFT    &kp DOWN      &kp RIGHT     &kp HOME
  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp U_CUT   &kp U_COPY  &kp U_PSTE  &kp LG(C)          &kp C_PP    &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT
                                                 &none       &none       &sys_reset         &kp RET     &trans      &kp DEL
            >;
        };

        num_layer {
            label = "NUMPAD";
            bindings = <
  &bt BT_SEL 0  &kp F7  &kp F8   &kp F9     &kp F10       &kp EQUAL   &kp N7  &kp N8  &kp N9  &kp PLUS
  &bt BT_SEL 1  &kp F4  &kp F5   &kp F6     &kp F11       &kp ASTRK   &kp N4  &kp N5  &kp N6  &kp MINUS
  &bt BT_SEL 2  &kp F1  &kp F2   &kp F3     &kp F12       &kp N0      &kp N1  &kp N2  &kp N3  &kp FSLH
                        &kp ESC  &kp SPACE  &kp DELETE    &bt BT_CLR  &none   &none
            >;
        };

        layer_4 {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &kp A   &kp R   &kp S   &kp T   &kp G     &kp M   &kp N   &kp E   &kp I   &kp O
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Zbrush {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp Q          &kp W      &kp E      &kp R  &kp Y
  &trans  &trans  &trans  &trans  &trans    &kp LG(LC(Z))  &kp LG(Z)  &hm U S    &kp X  &kp SPACE
  &trans  &trans  &trans  &trans  &trans    &kp G          &hm F P    &kp TAB    &kp D  &kp LS(LC(D))
                  &trans  &trans  &trans    &kp LCTRL      &kp LALT   &kp LSHFT
            >;
        };
    };
};
